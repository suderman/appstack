#!/usr/bin/env ruby

# 2012 Jon Suderman
# https://github.com/suderman/appstack/

require 'rubygems'
require 'optparse'
require 'yaml'
require 'fileutils'
include FileUtils

class AppStack

  def initialize(source, options)

    @options = options
    source = File.expand_path source

    # Ensure the yaml file exists
    if File.file? source

      # Process the yaml file
      begin
        stack = YAML::load File.open(source)

        # Ensure the necessary apps are installed first
        process stack, :bootstrap

        # Do everything else in any order
        process stack

      # Error message if the yaml file is malformed
      rescue Exception => se
        puts red("[error]#{se.to_s.split(':').last}") 
      end

    # Error message if the yaml file cannot be found
    else
      puts red("[error] \"#{source}\" not found!") 
    end

  end


  # Deal with each app in the stack
  def process(stack, key=nil)

    # Process a particular key in the stack
    if key
      key = key.to_s
      if stack[key]
        case key

        # Handle the bootstrap apps first
        when 'bootstrap' then stack.delete('bootstrap').each { |pre| process(stack, pre) }

        # Handle specified apps
        else process({ key => stack.delete(key) })

        end
      end
      return
    end

    # Process everything else
    skip = []
    stack.sort_by { |key, val| key.downcase }.each do |key, val|

      # Build app object from key + val
      app = parse key, val

      # Skip anything already installed out of order (because of pre)
      next if skip.include? key

      # Process any app prerequisites
      app[:pre].each do |pre|
        if stack[pre]
          process stack, pre
          skip << pre
        end
      end

      # Install each app appropriately
      case app[:use]

        # Install a new command
        when :command
          install app

        # Install a new brew recipe
        when :brew
          install app do
            system "brew install \"#{app[:app]}\" #{app[:opt].join(' ')}"
          end

        # Install a new node package
        when :npm
          install app do
            system "npm install \"#{app[:app]}\" #{app[:opt].join(' ')}"
          end

        # Install a new app with app 
        when :app
          install app do
            system "app \"#{app[:src]}\" #{app[:opt].join(' ')}"
          end

        # Open a URL 
        when :url
          install app do
            system "open \"#{app[:src]}\" #{app[:opt].join(' ')}"
            if app[:src].match /^macappstore/i
              say 'Click "Install" on the App Store'
            else
              say "Opening browser URL => #{app[:src]}"
            end
          end
      end
    end
  end


  # Install an app
  def install(app)

    puts "\n[#{green(app[:app])}]"

    # Ensure dependencies are installed
    if [:brew, :npm, :app].include? app[:use]
      unless command? app[:use].to_s, :skip_force_check => true
        puts red("[error] #{app[:use].to_s} is not installed!") 
        return false
      end
    end

    # Check if it's already installed
    if send "#{app[:use]}?", app[:app]
      puts "...already installed!"
    else

      # If only checking, don't install anything
      if @options[:check]
        puts gray("...needs to be installed.")

      # Run pre-install commands, install, run post-install commands
      else
        app[:pre].each { |line| system line }
        yield if block_given?
        app[:run].each { |line| system line }
      end

    end
  end


  # Parse yaml shorthand into consistent objects
  def parse(key, val)

    # Empty defaults
    use, src, tap = '', '', ''
    pre, run, opt = [], [], []

    # Check if shorthand was used or not
    case val.class.to_s

    # If so, set use and move on
    when 'String'
      use = expand val 

    # If not, set any explicit options
    when 'Hash'
      use = expand(val['use']) if val['use']
      src = expand(val['src']) if val['src']
      run = val['run'] if val['run']
      pre = val['pre'] if val['pre']
      tap = val['tap'] if val['tap']
      open = val['open'] if val['open']
    end

    # Determine installer based on contents of "use"
    case use

    # Brew => brew --with-mysql --with-cgi josegonzalez/php
    when /^brew(\s\-{1,2}[\w\-]+)*(\s[\w\-]+\/[\w\-]+)*$/i

      # Set tap if the shorthand is used
      tap = use.match(/([\w\-]+\/[\w\-]+)$/).to_s if tap.empty?

      # If this brew's repo is untapped, set the command in "pre"
      if pre.empty? and `brew tap | grep "#{tap}"`.chomp.empty?
        pre = "brew tap #{tap}"
      end

      # Separate out any trailing options
      use, options = source_options use.gsub(" #{tap}", '')

      # Set "opt" with existing options
      opt = options.strip.split(' ')

      # Set use to :brew
      use = :brew

    when /^npm(\s\-{1,2}[\w\-]+)*$/

      # Separate out any trailing options
      use, options = source_options use

      # Set "opt" with existing options
      opt = options.strip.split(' ')

      # Force global installs
      opt << '--global'

      # Set use to :npm
      use = :npm

    # App or URL
    when /^(app|url)$/, /\.(#{extensions})(\s(\-{1,2})[\w\-]*)*$/i, /^(#{protocols}):/i

      # Separate out any trailing options
      use, options = source_options(use)

      # Set "opt" with existing options
      opt = options.strip.split(' ')

      # Store use in "src" since use contains a path or URL
      src = use if src.empty?

      # If "use" ends in a known extension, set :app -- otherwise, set :url
      use = (extensions.split('|').include? use.split('.').last) ? :app : :url

      # Check for open and force options
      if use == :app
        opt << '--open' if open
        opt << '--force' if @options[:force]
      end

    # Everything else is considered a command
    else
      run = val unless val['run']
      use = :command
    end

    # Split linebreaks into arrays for commands
    run = run.split("\n") if run.class.to_s == 'String'
    pre = pre.split("\n") if pre.class.to_s == 'String'

    # Assemble new app object
    { :app => key, :use => use, :src => src, :opt => opt, :pre => pre, :run => run }
  end


  # Known extensions handled by app installer
  def extensions
    "zip|dmg|pkg|mpkg|service|prefPane|safariextz"
  end


  # Known protocols in valid URLs
  def protocols
    "http|https|macappstore"
  end


  # Does a command exist?
  def command?(name, options={})
    unless options[:skip_force_check]
      return false if @options[:force]
    end
    system "type #{name} &> /dev/null"
  end


  # Has this brew recipe been installed?
  def brew?(name)
    return false if @options[:force]

    unless command? 'brew'
      puts red("[error] Homebrew is not installed!") 
      return false
    end

    system "brew ls | grep #{name} &> /dev/null"
  end


  # Has this node package been installed?
  def npm?(name)
    return false if @options[:force]

    unless command? 'npm'
      puts red("[error] npm is not installed!") 
      return false
    end

    system "npm -g ls | grep #{name} &> /dev/null"
  end


  # Has this app been installed?
  def app?(name)

    # With force enabled, NOTHING has been installed
    return false if @options[:force]

    # First see if the name is a command
    return true if command? name

    # Otherwise, check for different app types
    case name.split('.').last.downcase.to_sym

    when :app
      return true if find? "/Applications", name
      return true if find? "~/Applications", name
      return true if find? "~/Library/Application Support", name

    when :prefpane
      return true if find? "~/Library/PreferencePanes", name
      return true if find? "/Library/PreferencePanes", name

    when :service
      return true if find? "~/Library/Services", name
      return true if find? "/Library/Services", name

    when :plugin
      return true if find? "~/Library/Internet Plug-Ins", name
      return true if find? "/Library/Internet Plug-Ins", name

    when :safariextz
      return true if find? "~/Library/Safari/Extensions", name
    end

    false
  end


  # Just check app? locations
  def url?(name)
    app? name
  end


  # Check if an app exists
  def find?(path, name)

    # Ensure the path we're searching in exists
    path = File.expand_path(path)
    return false unless File.exist? path

    # Look for the file without sudo
    find_command = "find \"#{path}\" -iname \"#{name}\" 2>&1 | head -n 1"
    results = `#{find_command}`.chomp

    # If that doesn't work, go full-sudo
    if results.match(/permission denied/i)
      results = `sudo #{find_command}`.chomp
    end

    true unless results.empty?
  end


  # Expand source into full URL (when applicable)
  def expand(source)

    # Temporarily remove any options
    source, options = source_options(source)

    case source

    # App Store => sparrow/id417250177 
    when /^[\w\-]*\/id[0-9]*$/i
      "macappstore://itunes.apple.com/ca/app/#{source}#{options}"

    # Dropbox => zmlm47fmbqcnwl7/GCC-10.7-v2.pkg
    when /^[\w]*\/[\w\.\-\s%!]*\.(#{extensions})$/i
      "https://dl.dropbox.com/s/#{source}#{options}"

    else
      "#{source}#{options}"
    end

  end


  # Split source from options
  def source_options(source)
    options = source.strip.split('.').last.split(' ')[1..-1]
    options = (options.empty?) ? '' : " #{options.join(' ')}"
    source = source.gsub options, ''
    [source, options]
  end


  # Ask for permission
  def ask(prompt)
    print yellow("#{prompt} [y/n]"), ' '
    $stdin.gets.strip.match /^y/i
  end


  # Stop and say something
  def say(message)
    print yellow("#{message} [OK?]"), ' '
    $stdin.gets.strip
  end


  # Pretty colours
  def red(text)    "\033[31m#{text}\033[m" end
  def green(text)  "\033[32m#{text}\033[m" end
  def yellow(text) "\033[33m#{text}\033[m" end
  def blue(text)   "\033[34m#{text}\033[m" end
  def gray(text)   "\033[37m#{text}\033[m" end

end


# Default values for options
options = { :check => false, :force => false, :help => false }

# Option parser
opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: appstack [OPTIONS] YAML"
  opt.on("-c","--check","Only check if apps need to be installed") { options[:check] = true }
  opt.on("-f","--force","Force existing apps to be overwritten") { options[:force] = true }
  opt.on("-h","--help","help") { options[:help] = true }
end

opt_parser.parse!


# If there's an argument, let's do this:
if ARGV[0]
  source = ARGV[0]
  AppStack.new source, options

# If there's no arguments, show the help
else
  options[:help] = true
end

puts opt_parser if options[:help]
